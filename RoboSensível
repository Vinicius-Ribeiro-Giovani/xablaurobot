import robocode.*;

public class RoboSensivel extends AdvancedRobot {
    // Variáveis para controlar o movimento
    private double velocidade = 5;
    private double angulo = 0;
    private boolean movendoParaFrente = true;

    // Variáveis para lidar com o inimigo
    private double distanciaInimigo = 0;
    private double anguloInimigo = 0;
    private boolean inimigoVisivel = false;
    private double inimigoX = 0;
    private double inimigoY = 0;

    // Variáveis para controlar o tiro
    private int energiaArma = 100;
    private boolean atirando = false;

    public void run() {
        // Ajusta o corpo do robô para melhor detecção de inimigos
        setTurnGunRight(45);
        setFireBullet(3);

        while (true) {
            // Atualizar informações sobre o inimigo
            scan();

            // Verifique se o inimigo está visível
            if (inimigoVisivel) {
                // Calcular o ângulo para mirar no inimigo
                anguloInimigo = getHeading() + angulo;

                // Verifique se o robô está apontando para o inimigo
                if (Math.abs(getGunHeading() - anguloInimigo) > 5) {
                    // Virar o canhão para apontar para o inimigo
                    setTurnGunRight(anguloInimigo - getGunHeading());
                } else {
                    // Se o inimigo estiver dentro do alcance, atire
                    if (distanciaInimigo < 100) {
                        if (energiaArma > 0) {
                            setFire(3);
                            energiaArma -= 3;
                            atirando = true;
                        } else {
                            // Recarregar a arma se estiver sem energia
                            setTurnGunRight(45);
                            execute();
                            setTurnGunRight(-45);
                            execute();
                            energiaArma = 100;
                        }
                    }
                }
            } else {
                // Mover-se aleatoriamente se nenhum inimigo for visível
                if (movendoParaFrente) {
                    setAhead(velocidade);
                } else {
                    setBack(velocidade);
                }

                if (Math.random() < 0.1) {
                    movendoParaFrente = !movendoParaFrente;
                }

                if (Math.random() < 0.02) {
                    angulo = Math.random() * 360 - 180;
                    setTurnRight(angulo);
                }
            }

            // Verifique se o robô recebeu dano
            if (getEnergy() < 100) {
                // Mover para trás e girar aleatoriamente para evitar mais danos
                setBack(velocidade);
                angulo = Math.random() * 360 - 180;
                setTurnRight(angulo);
            }

            // Esperar um pouco antes de repetir o ciclo
            execute();
        }
    }

    // Evento chamado quando um robô é escaneado
    public void onScannedRobot(ScannedRobotEvent e) {
        // Armazenar informações sobre o inimigo
        inimigoVisivel = true;
        distanciaInimigo = e.getDistance();
        angulo = e.getBearing();
        anguloInimigo = e.getBearingRadians();
        inimigoX = getX() + Math.sin(getHeadingRadians() + anguloInimigo) * distanciaInimigo;
        inimigoY = getY() + Math.cos(getHeadingRadians() + anguloInimigo) * distanciaInimigo;

        // Atualizar a energia da arma após o tiro
        if (atirando) {
            energiaArma -= (int) e.getEnergy();
            atirando = false;
        }
    }

    // Evento chamado quando o robô bate em algo
    public void onHitWall(HitWallEvent e) {
        // Mover para trás e girar aleatoriamente para evitar mais danos
        setBack(velocidade);
        angulo = Math.random() * 360 - 180;
        setTurnRight(angulo);
    }
}

